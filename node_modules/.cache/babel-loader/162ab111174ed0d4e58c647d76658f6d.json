{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\laptop\\\\Documents\\\\GitHub\\\\techlabs2\\\\src\\\\components\\\\dialog\\\\location.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport GoogleMapReact from \"google-map-react\";\nimport Polygon from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Location = () => {\n  _s();\n\n  const [lat, setLat] = useState(null);\n  const [lng, setLng] = useState(null);\n  const [status, setStatus] = useState(null);\n  const coordinates = [];\n\n  const getLocation = () => {\n    if (!navigator.geolocation) {\n      setStatus('Geolocation is not supported by your browser');\n    } else {\n      setStatus('Locating...');\n      navigator.geolocation.watchPosition(position => {\n        setStatus(null);\n        setLat(position.coords.latitude);\n        setLng(position.coords.longitude);\n        console.log(\"Latitude is :\", position.coords.latitude);\n        console.log(\"Longitude is :\", position.coords.longitude);\n        coordinates.push([position.coords.latitude, position.coords.longitude]);\n        window.localStorage.setItem(\"coordinates\", JSON.stringify(coordinates));\n      }, () => {\n        setStatus('Unable to retrieve your location');\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Location\",\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: getLocation,\n      children: \"Get Location\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Location, \"hE8zokPMCLWpC8jNhVBxs8GN+Js=\");\n\n_c = Location;\n\nfunction Map(props) {\n  _s2();\n\n  const {\n    zoom,\n    center\n  } = props;\n  const [name, setName] = useState(() => {\n    // getting stored value\n    const saved = localStorage.getItem(\"coordinates\");\n    const initialValue = JSON.parse(saved);\n    return initialValue || \"\";\n  });\n  return /*#__PURE__*/_jsxDEV(GoogleMapReact, {\n    defaultZoom: zoom,\n    defaultCenter: center,\n    children: /*#__PURE__*/_jsxDEV(Polygon, {\n      path: coordinates,\n      editable: true,\n      options: {\n        strokeColor: \"#FF0000\",\n        strokeOpacity: 0.8,\n        strokeWeight: 2,\n        fillColor: \"#FF0000\",\n        fillOpacity: 0.35,\n        polygonKey: 1\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(Map, \"Mzb3ralXsYlbSulWmWQndAyN6Q8=\");\n\n_c2 = Map;\nexport default Location;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Location\");\n$RefreshReg$(_c2, \"Map\");","map":{"version":3,"sources":["C:/Users/laptop/Documents/GitHub/techlabs2/src/components/dialog/location.jsx"],"names":["React","useState","GoogleMapReact","Polygon","Location","lat","setLat","lng","setLng","status","setStatus","coordinates","getLocation","navigator","geolocation","watchPosition","position","coords","latitude","longitude","console","log","push","window","localStorage","setItem","JSON","stringify","Map","props","zoom","center","name","setName","saved","getItem","initialValue","parse","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","polygonKey"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport GoogleMapReact from \"google-map-react\";\r\nimport Polygon from 'react';\r\n\r\n  const Location = () => {\r\n  const [lat, setLat] = useState(null);\r\n  const [lng, setLng] = useState(null);\r\n  const [status, setStatus] = useState(null);\r\n  const coordinates = [];\r\n\r\n  const getLocation = () => {\r\n    if (!navigator.geolocation) {\r\n      setStatus('Geolocation is not supported by your browser');\r\n    } else {\r\n      setStatus('Locating...');\r\n      navigator.geolocation.watchPosition((position) => {\r\n        setStatus(null);\r\n        setLat(position.coords.latitude);\r\n        setLng(position.coords.longitude);\r\n        console.log(\"Latitude is :\", position.coords.latitude);\r\n        console.log(\"Longitude is :\", position.coords.longitude);\r\n        coordinates.push([position.coords.latitude, position.coords.longitude]);\r\n        window.localStorage.setItem(\"coordinates\", JSON.stringify(coordinates));\r\n\r\n      }, () => {\r\n        setStatus('Unable to retrieve your location');\r\n      });\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"Location\">\r\n      <button onClick={getLocation}>Get Location</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Map(props) {\r\n  const { zoom, center } = props;\r\n\r\n  const [name, setName] = useState(() => {\r\n  // getting stored value\r\n  const saved = localStorage.getItem(\"coordinates\");\r\n  const initialValue = JSON.parse(saved);\r\n  return initialValue || \"\";\r\n});\r\n\r\n  return (\r\n    <GoogleMapReact defaultZoom={zoom} defaultCenter={center}>\r\n      <Polygon\r\n        path={coordinates}\r\n        editable={true}\r\n        options={{\r\n          strokeColor: \"#FF0000\",\r\n          strokeOpacity: 0.8,\r\n          strokeWeight: 2,\r\n          fillColor: \"#FF0000\",\r\n          fillOpacity: 0.35,\r\n          polygonKey: 1\r\n        }}\r\n      />\r\n    </GoogleMapReact>\r\n  );\r\n}\r\n\r\nexport default Location;\r\n"]},"metadata":{},"sourceType":"module"}